# coding: utf-8

"""
Aries Cloud Agent

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.3.2rc0.post20250822
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

import orjson
from pydantic import BaseModel, Field, StrictStr
from typing_extensions import Annotated, Self

from aries_cloudcontroller.models.indy_rev_reg_def_value import IndyRevRegDefValue
from aries_cloudcontroller.util import DEFAULT_PYDANTIC_MODEL_CONFIG


class IndyRevRegDef(BaseModel):
    """
    IndyRevRegDef
    """  # noqa: E501

    cred_def_id: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, description="Credential definition identifier", alias="credDefId"
    )
    id: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, description="Indy revocation registry identifier"
    )
    revoc_def_type: Optional[StrictStr] = Field(
        default=None,
        description="Revocation registry type (specify CL_ACCUM)",
        alias="revocDefType",
    )
    tag: Optional[StrictStr] = Field(
        default=None, description="Revocation registry tag"
    )
    value: Optional[IndyRevRegDefValue] = Field(
        default=None, description="Revocation registry definition value"
    )
    ver: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, description="Version of revocation registry definition"
    )
    __properties: ClassVar[List[str]] = [
        "credDefId",
        "id",
        "revocDefType",
        "tag",
        "value",
        "ver",
    ]

    model_config = DEFAULT_PYDANTIC_MODEL_CONFIG

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndyRevRegDef from a JSON string"""
        return cls.from_dict(orjson.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict["value"] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndyRevRegDef from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "credDefId": obj.get("credDefId"),
                "id": obj.get("id"),
                "revocDefType": obj.get("revocDefType"),
                "tag": obj.get("tag"),
                "value": (
                    IndyRevRegDefValue.from_dict(obj["value"])
                    if obj.get("value") is not None
                    else None
                ),
                "ver": obj.get("ver"),
            }
        )
        return _obj
