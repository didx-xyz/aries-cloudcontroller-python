# coding: utf-8

"""
Aries Cloud Agent

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.3.0.post20250505
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

import orjson
from pydantic import BaseModel, Field, StrictStr
from typing_extensions import Self

from aries_cloudcontroller.models.service import Service
from aries_cloudcontroller.models.verification_method import VerificationMethod
from aries_cloudcontroller.util import DEFAULT_PYDANTIC_MODEL_CONFIG


class DIDDocument(BaseModel):
    """
    DIDDocument
    """  # noqa: E501

    assertion_method: Optional[List[StrictStr]] = Field(
        default=None, description="Assertion Methods", alias="assertionMethod"
    )
    authentication: List[StrictStr] = Field(description="Authentication Methods")
    controller: List[StrictStr] = Field(description="DID Document controllers")
    id: StrictStr = Field(description="DID ID")
    service: Optional[List[Service]] = Field(default=None, description="Services")
    verification_method: List[VerificationMethod] = Field(
        description="Verification Methods", alias="verificationMethod"
    )
    __properties: ClassVar[List[str]] = [
        "assertionMethod",
        "authentication",
        "controller",
        "id",
        "service",
        "verificationMethod",
    ]

    model_config = DEFAULT_PYDANTIC_MODEL_CONFIG

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DIDDocument from a JSON string"""
        return cls.from_dict(orjson.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in service (list)
        _items = []
        if self.service:
            for _item_service in self.service:
                if _item_service:
                    _items.append(_item_service.to_dict())
            _dict["service"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in verification_method (list)
        _items = []
        if self.verification_method:
            for _item_verification_method in self.verification_method:
                if _item_verification_method:
                    _items.append(_item_verification_method.to_dict())
            _dict["verificationMethod"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DIDDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "assertionMethod": obj.get("assertionMethod"),
                "authentication": obj.get("authentication"),
                "controller": obj.get("controller"),
                "id": obj.get("id"),
                "service": (
                    [Service.from_dict(_item) for _item in obj["service"]]
                    if obj.get("service") is not None
                    else None
                ),
                "verificationMethod": (
                    [
                        VerificationMethod.from_dict(_item)
                        for _item in obj["verificationMethod"]
                    ]
                    if obj.get("verificationMethod") is not None
                    else None
                ),
            }
        )
        return _obj
