# coding: utf-8

"""
    Aries Cloud Agent

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.12.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, StrictBool, StrictStr
from typing_extensions import Self

from aries_cloudcontroller.models.document_verification_result import (
    DocumentVerificationResult,
)
from aries_cloudcontroller.util import DEFAULT_PYDANTIC_MODEL_CONFIG


class PresentationVerificationResult(BaseModel):
    """
    PresentationVerificationResult
    """  # noqa: E501

    credential_results: Optional[List[DocumentVerificationResult]] = None
    errors: Optional[List[StrictStr]] = None
    presentation_result: Optional[DocumentVerificationResult] = None
    verified: StrictBool
    __properties: ClassVar[List[str]] = [
        "credential_results",
        "errors",
        "presentation_result",
        "verified",
    ]

    model_config = DEFAULT_PYDANTIC_MODEL_CONFIG

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PresentationVerificationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credential_results (list)
        _items = []
        if self.credential_results:
            for _item in self.credential_results:
                if _item:
                    _items.append(_item.to_dict())
            _dict["credential_results"] = _items
        # override the default output from pydantic by calling `to_dict()` of presentation_result
        if self.presentation_result:
            _dict["presentation_result"] = self.presentation_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PresentationVerificationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "credential_results": (
                    [
                        DocumentVerificationResult.from_dict(_item)
                        for _item in obj["credential_results"]
                    ]
                    if obj.get("credential_results") is not None
                    else None
                ),
                "errors": obj.get("errors"),
                "presentation_result": (
                    DocumentVerificationResult.from_dict(obj["presentation_result"])
                    if obj.get("presentation_result") is not None
                    else None
                ),
                "verified": obj.get("verified"),
            }
        )
        return _obj
