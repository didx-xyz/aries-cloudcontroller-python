# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Literal, Optional, Union  # noqa: F401

from pydantic import (  # noqa: F401
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Extra,
    Field,
    field_validator,
)


class Generated(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Generated - a model defined in OpenAPI
        master_secret: The master_secret of this Generated [Optional].
        number: The number of this Generated [Optional].
        remainder: The remainder of this Generated [Optional].
    """

    master_secret: Optional[str] = None
    number: Optional[str] = None
    remainder: Optional[str] = None

    @field_validator("master_secret")
    @classmethod
    def master_secret_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^[0-9]*$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of master_secret does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("number")
    @classmethod
    def number_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^[0-9]*$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of number does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("remainder")
    @classmethod
    def remainder_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^[0-9]*$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of remainder does not match regex pattern ('{pattern}')"
            )
        return value

    model_config = ConfigDict(populate_by_name=True)


Generated.model_rebuild()
