# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Literal, Optional, Union  # noqa: F401

from pydantic import (  # noqa: F401
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Extra,
    Field,
    field_validator,
)

from aries_cloudcontroller.model.attach_decorator_data import AttachDecoratorData


class AttachDecorator(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    AttachDecorator - a model defined in OpenAPI
        data: The data of this AttachDecorator.
        id: Attachment identifier [Optional].
        byte_count: Byte count of data included by reference [Optional].
        description: Human-readable description of content [Optional].
        filename: File name [Optional].
        lastmod_time: Hint regarding last modification datetime, in ISO-8601 format [Optional].
        mime_type: MIME type [Optional].
    """

    data: AttachDecoratorData
    id: Optional[str] = Field(None, alias="@id")
    byte_count: Optional[int] = None
    description: Optional[str] = None
    filename: Optional[str] = None
    lastmod_time: Optional[str] = None
    mime_type: Optional[str] = Field(None, alias="mime-type")

    @field_validator("lastmod_time")
    @classmethod
    def lastmod_time_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^\d{4}-\d\d-\d\d[T ]\d\d:\d\d(?:\:(?:\d\d(?:\.\d{1,6})?))?(?:[+-]\d\d:?\d\d|Z|)$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of lastmod_time does not match regex pattern ('{pattern}')"
            )
        return value

    model_config = ConfigDict(populate_by_name=True)


AttachDecorator.model_rebuild()
