# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Literal, Optional, Union  # noqa: F401

from pydantic import (  # noqa: F401
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Extra,
    Field,
    field_validator,
)


class ModelSchema(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    ModelSchema - a model defined in OpenAPI
        attr_names: Schema attribute names [Optional].
        id: Schema identifier [Optional].
        name: Schema name [Optional].
        seq_no: Schema sequence number [Optional].
        ver: Node protocol version [Optional].
        version: Schema version [Optional].
    """

    attr_names: Optional[List[str]] = Field(None, alias="attrNames")
    id: Optional[str] = None
    name: Optional[str] = None
    seq_no: Optional[int] = Field(None, alias="seqNo")
    ver: Optional[str] = None
    version: Optional[str] = None

    @field_validator("id")
    @classmethod
    def id_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
        if not re.match(pattern, value):
            raise ValueError(f"Value of id does not match regex pattern ('{pattern}')")
        return value

    @field_validator("seq_no")
    @classmethod
    def seq_no_min(cls, value):
        # Property is optional
        if value is None:
            return

        if value < 1:
            raise ValueError(f"seq_no must be greater than 1, currently {value}")
        return value

    @field_validator("ver")
    @classmethod
    def ver_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^[0-9.]+$"
        if not re.match(pattern, value):
            raise ValueError(f"Value of ver does not match regex pattern ('{pattern}')")
        return value

    @field_validator("version")
    @classmethod
    def version_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^[0-9.]+$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of version does not match regex pattern ('{pattern}')"
            )
        return value

    model_config = ConfigDict(populate_by_name=True)


ModelSchema.model_rebuild()
