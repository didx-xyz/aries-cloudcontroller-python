# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Literal, Optional, Union  # noqa: F401

from pydantic import (  # noqa: F401
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Extra,
    Field,
    field_validator,
)

from aries_cloudcontroller.model.conn_record import ConnRecord


class ConnectionStaticResult(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    ConnectionStaticResult - a model defined in OpenAPI
        my_did: Local DID.
        my_endpoint: My URL endpoint.
        my_verkey: My verification key.
        record: The record of this ConnectionStaticResult.
        their_did: Remote DID.
        their_verkey: Remote verification key.
    """

    my_did: str
    my_endpoint: str
    my_verkey: str
    record: ConnRecord
    their_did: str
    their_verkey: str

    @field_validator("my_did")
    @classmethod
    def my_did_pattern(cls, value):
        pattern = r"^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of my_did does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("my_endpoint")
    @classmethod
    def my_endpoint_pattern(cls, value):
        pattern = r"^[A-Za-z0-9\.\-\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of my_endpoint does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("my_verkey")
    @classmethod
    def my_verkey_pattern(cls, value):
        pattern = (
            r"^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
        )
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of my_verkey does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("their_did")
    @classmethod
    def their_did_pattern(cls, value):
        pattern = r"^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of their_did does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("their_verkey")
    @classmethod
    def their_verkey_pattern(cls, value):
        pattern = (
            r"^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
        )
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of their_verkey does not match regex pattern ('{pattern}')"
            )
        return value

    model_config = ConfigDict(populate_by_name=True)


ConnectionStaticResult.model_rebuild()
