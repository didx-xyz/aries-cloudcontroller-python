# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Literal, Optional, Union  # noqa: F401

from pydantic import (  # noqa: F401
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Extra,
    Field,
    field_validator,
)


class AttachDecoratorDataJWSHeader(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    AttachDecoratorDataJWSHeader - a model defined in OpenAPI
        kid: Key identifier, in W3C did:key or DID URL format.
    """

    kid: str

    @field_validator("kid")
    @classmethod
    def kid_pattern(cls, value):
        pattern = r"^did:(?:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+|sov:[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}(;.*)?(\?.*)?#.+)$"
        if not re.match(pattern, value):
            raise ValueError(f"Value of kid does not match regex pattern ('{pattern}')")
        return value

    model_config = ConfigDict(populate_by_name=True)


AttachDecoratorDataJWSHeader.model_rebuild()
