# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Literal, Optional, Union  # noqa: F401

from pydantic import (  # noqa: F401
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Extra,
    Field,
    field_validator,
)

from aries_cloudcontroller.model.indy_key_correctness_proof import (
    IndyKeyCorrectnessProof,
)


class IndyCredAbstract(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    IndyCredAbstract - a model defined in OpenAPI
        cred_def_id: Credential definition identifier.
        key_correctness_proof: Key correctness proof.
        nonce: Nonce in credential abstract.
        schema_id: Schema identifier.
    """

    cred_def_id: str
    key_correctness_proof: IndyKeyCorrectnessProof
    nonce: str
    schema_id: str

    @field_validator("cred_def_id")
    @classmethod
    def cred_def_id_pattern(cls, value):
        pattern = r"^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of cred_def_id does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("nonce")
    @classmethod
    def nonce_pattern(cls, value):
        pattern = r"^[0-9]*$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of nonce does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("schema_id")
    @classmethod
    def schema_id_pattern(cls, value):
        pattern = r"^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of schema_id does not match regex pattern ('{pattern}')"
            )
        return value

    model_config = ConfigDict(populate_by_name=True)


IndyCredAbstract.model_rebuild()
