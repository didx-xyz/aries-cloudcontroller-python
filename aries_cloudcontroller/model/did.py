# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Literal, Optional, Union  # noqa: F401

from pydantic import (  # noqa: F401
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Extra,
    Field,
    field_validator,
)


class DID(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    DID - a model defined in OpenAPI
        did: DID of interest [Optional].
        key_type: Key type associated with the DID [Optional].
        method: Did method associated with the DID [Optional].
        posture: Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet [Optional].
        verkey: Public verification key [Optional].
    """

    did: Optional[str] = None
    key_type: Optional[Literal["ed25519", "bls12381g2"]] = None
    method: Optional[Literal["sov", "key"]] = None
    posture: Optional[Literal["public", "posted", "wallet_only"]] = None
    verkey: Optional[str] = None

    @field_validator("did")
    @classmethod
    def did_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\#.*)?$$"
        if not re.match(pattern, value):
            raise ValueError(f"Value of did does not match regex pattern ('{pattern}')")
        return value

    model_config = ConfigDict(populate_by_name=True)


DID.model_rebuild()
