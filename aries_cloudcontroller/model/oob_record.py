# coding: utf-8

from __future__ import annotations

from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional, Union, Literal  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator, Field, Extra  # noqa: F401
from aries_cloudcontroller.model.invitation_message import InvitationMessage
from aries_cloudcontroller.model.service_decorator import ServiceDecorator


class OobRecord(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    OobRecord - a model defined in OpenAPI
        invi_msg_id: Invitation message identifier.
        invitation: Out of band invitation message.
        oob_id: Oob record identifier.
        state: Out of band message exchange state.
        attach_thread_id: Connection record identifier [Optional].
        connection_id: Connection record identifier [Optional].
        created_at: Time of record creation [Optional].
        our_recipient_key: Recipient key used for oob invitation [Optional].
        role: OOB Role [Optional].
        their_service: The their_service of this OobRecord.
        trace: Record trace information, based on agent configuration [Optional].
        updated_at: Time of last record update [Optional].
    """

    invi_msg_id: str
    invitation: InvitationMessage
    oob_id: str
    state: str
    attach_thread_id: Optional[str] = None
    connection_id: Optional[str] = None
    created_at: Optional[str] = None
    our_recipient_key: Optional[str] = None
    role: Optional[str] = None
    their_service: ServiceDecorator
    trace: Optional[bool] = None
    updated_at: Optional[str] = None

    def __init__(
        self,
        *,
        invi_msg_id: str = None,
        invitation: InvitationMessage = None,
        oob_id: str = None,
        state: str = None,
        attach_thread_id: Optional[str] = None,
        connection_id: Optional[str] = None,
        created_at: Optional[str] = None,
        our_recipient_key: Optional[str] = None,
        role: Optional[str] = None,
        their_service: ServiceDecorator,
        trace: Optional[bool] = None,
        updated_at: Optional[str] = None,
        **kwargs,
    ):
        super().__init__(
            attach_thread_id=attach_thread_id,
            connection_id=connection_id,
            created_at=created_at,
            invi_msg_id=invi_msg_id,
            invitation=invitation,
            oob_id=oob_id,
            our_recipient_key=our_recipient_key,
            role=role,
            state=state,
            their_service=their_service,
            trace=trace,
            updated_at=updated_at,
            **kwargs,
        )

    @validator("created_at")
    def created_at_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^\d{4}-\d\d-\d\d[T ]\d\d:\d\d(?:\:(?:\d\d(?:\.\d{1,6})?))?(?:[+-]\d\d:?\d\d|Z|)$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of created_at does not match regex pattern ('{pattern}')"
            )
        return value

    @validator("updated_at")
    def updated_at_pattern(cls, value):
        # Property is optional
        if value is None:
            return

        pattern = r"^\d{4}-\d\d-\d\d[T ]\d\d:\d\d(?:\:(?:\d\d(?:\.\d{1,6})?))?(?:[+-]\d\d:?\d\d|Z|)$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of updated_at does not match regex pattern ('{pattern}')"
            )
        return value

    class Config:
        allow_population_by_field_name = True


OobRecord.update_forward_refs()
