# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Literal, Optional, Union  # noqa: F401

from pydantic import (  # noqa: F401
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Extra,
    Field,
    validator,
)


class Filter(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Filter - a model defined in OpenAPI
        const: Const [Optional].
        enum: The enum of this Filter [Optional].
        exclusive_maximum: ExclusiveMaximum [Optional].
        exclusive_minimum: ExclusiveMinimum [Optional].
        format: Format [Optional].
        max_length: Max Length [Optional].
        maximum: Maximum [Optional].
        min_length: Min Length [Optional].
        minimum: Minimum [Optional].
        not_: Not [Optional].
        pattern: Pattern [Optional].
        type: Type [Optional].
    """

    const: Optional[Union[str, int, float]] = None
    enum: Optional[List[Union[str, int, float]]] = None
    exclusive_maximum: Optional[Union[str, int, float]] = Field(
        None, alias="exclusiveMaximum"
    )
    exclusive_minimum: Optional[Union[str, int, float]] = Field(
        None, alias="exclusiveMinimum"
    )
    format: Optional[str] = None
    max_length: Optional[int] = Field(None, alias="maxLength")
    maximum: Optional[Union[str, int, float]] = None
    min_length: Optional[int] = Field(None, alias="minLength")
    minimum: Optional[Union[str, int, float]] = None
    not_: Optional[bool] = Field(None, alias="not")
    pattern: Optional[str] = None
    type: Optional[str] = None
    model_config = ConfigDict(populate_by_name=True)


Filter.model_rebuild()
