# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Literal, Optional, Union  # noqa: F401

from pydantic import (  # noqa: F401
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Extra,
    Field,
    field_validator,
)


class IndyCredRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    IndyCredRequest - a model defined in OpenAPI
        blinded_ms: Blinded master secret.
        blinded_ms_correctness_proof: Blinded master secret correctness proof.
        cred_def_id: Credential definition identifier.
        nonce: Nonce in credential request.
        prover_did: Prover DID.
    """

    blinded_ms: Dict[str, Any]
    blinded_ms_correctness_proof: Dict[str, Any]
    cred_def_id: str
    nonce: str
    prover_did: str

    @field_validator("cred_def_id")
    @classmethod
    def cred_def_id_pattern(cls, value):
        pattern = r"^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of cred_def_id does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("nonce")
    @classmethod
    def nonce_pattern(cls, value):
        pattern = r"^[0-9]*$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of nonce does not match regex pattern ('{pattern}')"
            )
        return value

    @field_validator("prover_did")
    @classmethod
    def prover_did_pattern(cls, value):
        pattern = r"^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
        if not re.match(pattern, value):
            raise ValueError(
                f"Value of prover_did does not match regex pattern ('{pattern}')"
            )
        return value

    model_config = ConfigDict(populate_by_name=True)


IndyCredRequest.model_rebuild()
